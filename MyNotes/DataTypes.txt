Each datatype needs to be known at compile-time (statically typed)

Value Types => Can be passed by value.

Booleans: The possible values are constants: true and false

Integers: multiple possible different sizes.
  uint8 (int8) to uint256 (int256) (in steps of 8)
  uint and int are aliases for uint256 and int256


Address: Holds a 20 byte value (size of an Ethereum address). Address
types also have members and serve as base for all contracts.
  Member variables of an address
    -balance ->property
    -transfer ->instance method

    address x = 0x123;
    address myAddress = this;
    if (x.balance <10 && myAddress.balance >=10) x.transfer(10);

    //x is a contract address, its code (the fallback function)
    //will be executed together with the transfer call
    //If the combined executed runs out of gas or fails in any way
    //The Ether transfer will be reverted and the current contract will stop
    //with an exception

    -send, if the contract execution fails, send will simply return false
      -The issue with using send is that the transfer fails if the call stack
      depth is at 1024 or if the recipient runs out of gas. So in order to make safe
      Ether transfers, always check the return value of send, use transfer or
      even better, use a pattern where the recipient withdraws the money

    --call, callcode, delegatecall

    Call example:

    address nameReg= 0x72ba7d8e73fe8eb666ea66babc8116a41bfb10e2;
    nameReg.call("register", "MyName");
    nameReg.call(bytes4(keccak256("fun(uint256)")),a);

    call returns a boolean indicating whether the invoked function
    terminated (true) or caused an EVM exception (false). It is not possible
    to access the actual data returned (for this we would need to know the encoding
    and size in advance).

    In a similar way, the function delegatecall can be used: The
    difference is that only the code of the given address is used, all
    other aspects (storage, balance, ...) are taken from the current contract.

    The purpose of delegatecall is to use library code which is stored in another
    contract. The user has to ensure that the layout of storage in both
    contracts is suitable for delgatecall to be used. Prior to homestaead, only
    a limited variant called callcode was avaliable and did not
    provide access to the original msg.sender and msg.value values.

    All three functions, call, delegatecall and callcode are very
    low-level functions and should only used as a last resort as they break
    the type-safety of Solidity.

    The .gas() option is available on all three methods, while the .value() option
    is not supported for delegatecall.

Fixed-size byte arrays
bytes1...bytes32. byte is an alias bytes1
  -Operators
    Comparisons
    Bit operators
    Index access

  Members
    .length yields the fixed length of the byte array

Dynamically-sized byte array
  bytes:
    Dynamically-sized byte array. Not a value type!
  string:
    Dynamically-sized UTF-8 encoded string. Not a value type!

Fixed Point Numbers:
  Not really a thing yet

Address Literals
  Hexadecimal literals that pass the address checksum test.
  Hexadecimal literals that are between 39 and 41 digits long and do not pass
  the checksum test produce a warning and are treated as regular
  rational number literals.

Rational and Integer Literals
  Number literal expressions retain arbitrary precision until they
  are converted to a non-literal type (i.e. by using them together
  with non-literal expression). This means that computations do not
  overflow and divisions do not truncate in number literal expressions.

  (2**800 + 1) - 2*800 results in the constant 1 (of type uint8) although
  intermediate results would not even fit the machine word size.
  Also, .5*8 results in the integer 4 (although non-integers were used inbetween)

  If the result is not an integer, an appropriate ufixed or fixed type is used
  whose number of fractional bits is as large as required
  (approximating the rational number in the worse case).

  In var x = 1/4, x will receive the type ufixed0x8 while in var x =1/3 it
  will recieve the type ufixed0x256 because 1/3 is not finitely representable
  in binary and will thus be approximated.

  Division on integer literals used to truncate in earlier version, but
  it will now convert into a rational number (i.e. 5/2 is not
  equal to 2, but to 2.5)

String Literals

  Are written with either double or single quotes.
  They are implicitly convertible to bytes1...bytes32, if they fit,
  to bytes and to string.

Hexadecimal Literals

    Are prefixed with the keyword hex and are enclosed in double
    or single-quotes. Their content must be a hexidecimal string
    and their value will be the binary representation of those values.

    Hexadecimal Literals behave like String Literals and have the same
    convertibility restrictions

Enums

  They are explicitly convertible to and from all integer types
  but implicit conversion is not allowed. The explicit conversions
  check the value ranges at runtime and a failure causes an exception.
  Enums need at least one member.

  Example:

  pragma solidity ^0.4.0;

  contract test{
    enum ActionChoices {GoLeft, GoRight, GoStraight, SitStill}
    ActionChoices choice;
    ActionChoices constant defaultChoice=ActionChoices.GoStraight;

    function setGoStraight(){
      choice = ActionChoices.GoStraight;
    }

    function getChoice() returns (ActionChoices){
      return choice;
    }
    function getDefaultChoice() returns (uint){
      return uint(defaultChoice);
    }
  }

Function Types

Function types are the types of functions. Variables of function type
can be assigned from functions and function parameters of function type
can be used to pass functions to and return functions from function calls
(first class members).
Function types come in two flavors: internal (static), external (member function)

  Internal Functions:
    Can only be used inside the current contract (more specifically, inside
    the current code unit, which also includes internal library functions and inherited
    functions) because they cannot be executed outside of the context of the
    current contract. Calling an internal function is realized by jumping
    to its entry label, just like when calling a function of the current
    contract internally

    External functions consist of an address and a function signature and they
    can be passed via and returned from external function calls.

    function (<parameter types>) {internal|external} [constant] [payable] [returns (<return types>)]

    By default, function types are internal, so the internal keyword
    can be omitted.

    There are two ways to access a function in the current contract: Either
    directly by its name, f, or using this.f. The former will result in an
    internal function, the latter in an external function.

    If a function type variable is not initialized, calling it will result
    in an exception. The same happens if you call a function after using delete
    on it.

    If external function type used outside of the context of Solidity,
    they are treated as the function type, which encodes the address
    followed by the function identifier together in a single bytes24 type

    Note that public functions of the current contract can be used both
    as internal and as an external function. To use f as an internal
    function, just use f, if you want to use its external form use this.f

    Example that shows how to use internal function types:

    pragma solidity ^0.4.5

    library ArrayUtils {

      // internal functions can be used in internal library functions
      // because they will be part of the same code context

      function map (uint[] memory self, function (uint) returns (uint) f)
      internal returns (uint memory r)
      {
        r = new uint [](self,length);
        for (uint i =0; i< self.length; i++){
          r[i] = f(self[i]);
        }
      }
      function reduce()
        uint[] memory self,
        function (uint x, uint y) returns (uint) f)
        internal
        return (uint r)
        {
          r=self[0];
          for (uint i=1; i<self.length; i++){
              r=f(r, self[i]);
          }
        }
        function range(uint length) internal returns (uint[] memory r){
          r = new uint[] (length);
          for (uint i =0; i< r.length; i++)
          {
            r[i] =i;
          }
        }
        }

        contract Pyramid {
          using ArrayUtils for *;
          function pyramid(uint l) returns (uint){
            return ArrayUtils.range(l).map(square).reduce(sum);
          }
          function square(uint x) internal returns (uint){
            return x * x;
          }
          function sum (uint x, uint y) internal returns (uint){
            return x+ y;
          }
        }

    External Function Example

    pragma solidity ^0.4.11;

    contract Oracle{
      struct Request {
        bytes data;
        function(bytes memory) external callback;
      }
      Request[] requests;
      event NewRequest(uint);
      function query(bytes data, function (bytes memory) external callback){
        requests.push(Request(data, callback));
        NewRequest(requests.length-1);
      }
      function reply (uint requestID, bytes response){
        requests[requestID].callback(response);
      }
    }
    contract OracleUser{
      Oracle constant oracle = Oracle(0x1234567);
      function buySomething(){
        oracle.query("USD", this.oracleResponse);
      }
      function oracleResponse(bytes, response){
        require(msg.sender == address(oracle));


      }
    }
  WTF is a callback in Solidity and how the function is it called?

Reference Types
  Complex types, i.e. types which do not always fit into 256 bits have to
  be handled more carefully than the value-types we have already seen.
  Since copying them can be quite expensive we have to think about
  whether we want them to be stored in memory (which is not persisting)
  or storage (where the state variables are held).

Data location
  Every complex type (i.e. arrays and structs) has an additional annotation,
  the "data location" about whether it is stored in memory or in storage.
  Depending on the context, there is always a default but it can be
  overriden by appending either storage or memory to the type. The
  default for function parameters (including return parameters) is memory,
  the default for local variables is storage and the location is
  forces to storage for state variables (obviously).

  There is also a third data location, "calldata", which is a
  non-modifyable, non-persistent area where function arguments are
  stored. Function parameters (not return parameters) of external functions
  are forces to "calldata" and it behaves mostly like memory.

  Data locations are important because they change how assignments behave:
  Assignments between storage and memory and also to a state variable
  (even from other state variables) always create an independent copy.
  Assignments to local variables only assign a reference though, and
  this reference always points to the state variable even if
  the latter is changed in the meantime. On the other hand, assignments
  from a memory stored reference type to another memory-stored
  reference type does not create a copy.

  Clarifying Code:

  pragma solidity ^0.4.0;

  contract C{
    uint[] x;  //the data location of x is storage

    // the data location of memoryArray is memory
    function f(uint[] memoryArray){
      x = memoryArray; //works, copies the whole array to storage
      var y = x; //works assigns a pointer, data location of y is storage
      y[7];
      y.length=2;
      delete x; //fine, clears the array, also modifies y
      //The following does not work; it would need to create a
      //new temporary/
      //unnamed array in storage, but storage is "statically" allocated:
      //y=memoryArray;
      //This does not work either, since it would "reset" the pointer, but
      //there is no sensible location it could point to.
      //delete y;
      g(x); //calls g, handling over a reference to x
      h(x); //calls h and creates an independent, temporary copy in memory

    }
    function g(uint [] storage storageArray) internal {}
    function h(uint [] memoryArray) {}

  }

  Summary

  Forced Data Location:
    - parameters (not return) of external functions: call data
    - state variables: storage

  Default data location:
    - parameters (also return) of functions: memory
    - all other local variables: storage

Arrays

  -Can have compile-time fixed size or they can be dynamic.
  For storage arrays, the element type can be arbitrary.
  For memory arrays, it cannot be a mapping and has to be an ABI
  type if it is an argument of a publically visible function.


Allocating Memory Arrays

  pragma solidity ^0.4.0;

  contract C{
    function f(uint len){
      uint[] memory a = new uint[] (7);
      bytes memory b = new bytes(len);
      a[6]=8;
    }
  }

Array Literals / Inline Arrays

pragma solidity ^0.4.0;

contract C {
  function f(){
    g([uint(1), 2,3]);
  }
  function g(uint[3], _data){
    //stuff
  }

}

//Currently, fixed size memory arrays cannot be assigned to
//dynamically-sized memory arrays, i.e. the following is not
//possible

pragma solidity ^0.4.0;

contract C{
  function f(){
    //the next line creates a type error because uint[3] memory
    //cannot be converted to uint[] memory
    uint [] x = [uint(1), 3,4];
  }
}

Members:
  length:
    Arrays have a length member to hold their number of elements.
    Dynamic arrays can be resized in storage(not in memory) by
    changing the .length member. This does not happen automatically
    when attempting to access elements outside the current length.
    The size of memory arrays is fixed (but dynamic, i.e. it can depend on
    runtime parameters) once they are created.
  push:
    Dynamic storage arrays and byte (not string) have a member function
    called push that can be used to append an element at the end of the
    array. The function returns the new length

Due to limitation of the EVM, it is not possible to return dymanic
content from external function calls. The function f in
  contract C
  {
    function f()
      returns (uint[]) {...}
  }
  will return something if called from web3.js but not if called from Solidity.


pragma solidity ^0.4.0;

contract ArrayContract{
  uint[2**20] m_aLotOfIntegers;

  //Note that the following is not a pair of dynamic arrays
  //but a dynamic array of pairs (i.e. of fixed array of length two)
  bool [2][] m_pairsOfFlags;

  //newPairs is stored in memory - the default for function arguments
  function setAllFlagPairs(bool[2][] newPairs){
    //assignment to a storage array replaces the complete array
    m_pairsOfFlags = newPairs;
  }

  function setFlagPair(uint index, bool flagA, bool flagB)
  {
    //access to a non-existing index will throw an exception
    m_pairsOfFlags[index][0] = flagA;
    m_pairsOfFlags[index][1]= flagB;
  }
  function changeFlagArraySize(uint newSize){
    //if the new size is smaller, removed array elements will be cleared
    m_pairsOfFlags.length= newSize;
  }
  function clear(){
    //these clear the arrays completely
    delete m_pairsOfFlags;
    delete m_aLotOfIntegers;

    //identical effect here
    m_pairsOfFlags.length=0;
  }
  bytes m_byteData;

  function byteArrays(bytes data){
    //byte arrays ("bytes") are different as they are s
  }


}


Mappings

  -Are declared as mapping(_KeyType => _ValueType). Here
  _KeyType can be almost any type except for a mapping,
  a dynamically sized array, a contract, an enum and
  a struct. _ValueType can actually be any type, including
  mappings.

  Mappings can be seen as hash tables which are virtually
  initialized such that every possible key exists and is
  mapped to a value whose byte-representation is all
  zeros: a type's default value.

  The key data is not actually stored in a mapping, only
  its keccak256 hash used to look up the value.

Example:

  pragma solidity ^0.4.0;

  contract MappingExample{
    mapping(address => uint) public balances;

    function update(uint newBalance){
      balances[msg.sender] = newBalance;
    }
  }
  contract MappingUser{
    function f() returns (uint){
      return MappingExample(<address>).balances(this);
    }
  }

Operators Involving LValues
  delete
    Assigns the initial value for the type of a.
    For integers it is equivalent to a=0, but it can also
    be used on arrays, where it assigns a dynamic array of
    length zero or a static array of the same
    length with all elements reset. For structs, it
    assigns a struct with all members reset.


Example:

  pragma solidity ^0.4.0;

  contract DeleteExample {

    uint data;
    uint []  dataArray;

    function f(){
      uint x = data;
      delete x;
      delete data;

      uint[] y = dataArray;
      delete dataArray;

      //delete dataArray is a totally
      //valid command. It simply sets the length
      //of the dataArray back to zero. Both
      //dataArray and y are effected. Y is a local
      //alias to a storage object.
      //Delete y is not valid because assignments to
      //local variables referencing storage objects
      //can only be made from existing storage objects
    }
  }
